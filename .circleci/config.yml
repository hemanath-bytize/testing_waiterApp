version: 2.1
orbs:
  slack: circleci/slack@4.12.5

defaults: &defaults
  working_directory: ~/waiter-app-build
  docker:
    - image: reactnativecommunity/react-native-android

jobs:
  build:
    parameters:
      envCmd:
        type: string
        default: echo 'production'
      white-label:
        type: string
        default: "posbytz"
      patner:
        type: string
        default: "Posbytz"
      build-type:
        type: string
        default: "apk" # can be "apk" or "codepush"
    <<: *defaults
    steps:
      - checkout
      
      # Setup environment
      - run:
          name: Setup environment
          command: << parameters.envCmd >>
      
      # Install dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install dependencies
          command: npm i
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      
      # Build logic
      - run:
          name: Build and deploy
          command: |
            current_version=$(jq -r '.version' package.json)
            current_app_version=$(jq -r '.appVersion' package.json)
            echo "Building << parameters.white-label >> v$current_version"
            
            if [[ "<< parameters.build-type >>" == "apk" ]]; then
              echo "Building APK..."
              cd android
              chmod +x gradlew
              ./gradlew clean
              ./gradlew --no-daemon assemble<< parameters.patner >>Release
              
              APK_PATH=$(find ./app/build/outputs/apk/<< parameters.white-label >>/release -name "*apk" | head -n 1)
              
              if [ -f "$APK_PATH" ]; then
                BRANCH_NAME=${CIRCLE_BRANCH:-development}
                
                if [ "$BRANCH_NAME" == "main" ]; then
                  NEW_APK_NAME="waiter-<< parameters.white-label >>-release-${current_version//./-}.apk"
                else
                  NEW_APK_NAME="waiter-<< parameters.white-label >>-staging-${current_version//./-}.apk"
                fi
                
                mv "$APK_PATH" "./app/build/outputs/apk/$NEW_APK_NAME"
                
                # Upload to Slack
                curl -F file=@"./app/build/outputs/apk/$NEW_APK_NAME" -F channels=$SLACK_WAITER_APP_CHANNEL_ID \
                  -H "Authorization: Bearer $SLACK_TOKEN" https://slack.com/api/files.upload || \
                  { echo "File upload to Slack failed!"; exit 1; }
                
                # Send success message
                curl -X POST -H "Authorization: Bearer $SLACK_TOKEN" \
                  -H "Content-type: application/json" \
                  --data '{"channel":"'$SLACK_WAITER_APP_CHANNEL_ID'","text":"<< parameters.white-label >> APK build successful\nVersion: '$current_version'\nApp Version: '$current_app_version'"}' \
                  https://slack.com/api/chat.postMessage || { echo "Failed to send success message to Slack!"; exit 1; }
              else
                echo "APK not found!"
                exit 1
              fi
            
            elif [[ "<< parameters.build-type >>" == "codepush" ]]; then
              echo "Deploying CodePush..."
              npm run codepush:install
              sudo apt-get install -y watchman
              appcenter login --token $CODE_PUSH
              
              # Determine CodePush command based on white-label
              npm run codepush:android:<< parameters.white-label >>:staging
              
              curl -X POST -H "Authorization: Bearer $SLACK_TOKEN" \
                -H "Content-type: application/json" \
                --data '{"channel":"'$SLACK_WAITER_APP_CHANNEL_ID'","text":"<< parameters.white-label >> CodePush deployed\nVersion: '$current_version'\nApp Version: '$current_app_version'"}' \
                https://slack.com/api/chat.postMessage || { echo "Failed to send CodePush message to Slack!"; exit 1; }
            fi

workflows:
  version: 2
  build-deploy:
    jobs:
      # Posbytz builds
      - build:
          name: posbytz-staging-apk
          context: waiter-app
          envCmd: npm run posbytz:staging
          white-label: posbytz
          build-type: apk
          patner: Posbytz
          filters:
            branches:
              only:
                - main
      
      # Itsolver builds
      # - build:
      #     name: itsolver-production-apk
      #     context: waiter-app
      #     envCmd: npm run itsolver:prod
      #     white-label: itsolver
      #     build-type: apk
      #     filters:
      #       branches:
      #         only: main
      
      # Aelia builds (example - add commands to package.json)
      # - build:
      #     name: aelia-production-apk
      #     context: waiter-app
      #     envCmd: npm run aelia:prod
      #     white-label: aelia
      #     build-type: apk
      #     filters:
      #       branches:
      #         only: main
      
      # Prosumpos builds (example - add commands to package.json)
      # - build:
      #     name: prosumpos-production-apk
      #     context: waiter-app
      #     envCmd: npm run prosumpos:prod
      #     white-label: prosumpos
      #     build-type: apk
      #     filters:
      #       branches:
      #         only: main